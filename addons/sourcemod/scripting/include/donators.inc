/** Double-include prevention */
#if defined _donators_included_
  #endinput
#endif
#define _donators_included_


public SharedPlugin __pl_donators = 
{
	name = "donators",
	file = "inilo-donators.smx",
#if defined REQUIRE_PLUGIN
	required = 1,
#else
	required = 0,
#endif
};

#if !defined REQUIRE_PLUGIN
public __pl_donators_SetNTVOptional()
{
	MarkNativeAsOptional("Donator_IsDonator");
	MarkNativeAsOptional("Donator_GetType");
	MarkNativeAsOptional("Donator_GetAmount");
	MarkNativeAsOptional("Donator_GetDaysLeft");
	MarkNativeAsOptional("Donator_GetShowName");
	MarkNativeAsOptional("Donator_GetColorForPerk");
	MarkNativeAsOptional("Donator_DisabledChatTag");
	MarkNativeAsOptional("Donator_DisabledDonatorPrefix");
	MarkNativeAsOptional("Donator_GetDisabledFeatures");
	MarkNativeAsOptional("Donator_GetChatTag");

	MarkNativeAsOptional("Donator_TaserEffectEnabled");
	
	MarkNativeAsOptional("Donator_HasReservedSlot");

	//guest.
	MarkNativeAsOptional("Guest_IsSpecialGuest");
	MarkNativeAsOptional("Guest_GetNote");
	MarkNativeAsOptional("Guest_GetTag");
	MarkNativeAsOptional("Guest_DisabledSpecialGuestPrefix");

}
#endif
native bool Donator_IsDonator(int client);
native bool Donator_HasReservedSlot(int client);
native int Donator_GetType(int client);
native int Donator_GetAmount(int client);
native int Donator_GetDaysLeft(int client);
native bool Donator_GetShowName(int client);
native int Donator_GetColorForPerk(int client,EDonatorColorMenu perk);

//chat tags.
native bool Donator_DisabledChatTag(int client);
native bool Donator_DisabledDonatorPrefix(int client);
native char Donator_GetChatTag(int client, char[] output, int maxlen);

//banned features
native bool Donator_GetDisabledFeatures(int client);

//taser.
native bool Donator_TaserEffectEnabled(int client);

//guest.
native bool Guest_IsSpecialGuest(int client);
native char Guest_GetNote(int client, char[] output, int maxlen);
native char Guest_GetTag(int client, char[] output, int maxlen);
native bool Guest_DisabledSpecialGuestPrefix(int client);

enum EDonatorColorMenu
{
	Color_WardenBall,
	Color_FreedayBeacon,
	Color_WardenArrow,
	Color_AdminArrow,
	Color_LaserLetters,
	Color_Trail,
	Color_Poop,
}
stock const char EDonatorColorMenuMenuItems[][] = 
{
	"WardenBall",
	"FreedayBeacon",
	"WardenArrow",
	"AdminArrow",
	"LaserLetters",
	"Trail",
	"Poop",
};
stock const char EDonatorColorMenuMenuItemsDisplay[][] = 
{
	"WardenBall",
	"FreedayBeacon",
	"WardenArrow",
	"AdminArrow",
	"LaserLetters",
	"Trail",
	"Poop",
};



//color stuff.
#define MAX_COLORS 141
#define COLORS_OFFSET 3


#define BANNED_FD										(1 << 1)	





stock const char g_cColorNames[MAX_COLORS][] = 
{
	//http://prideout.net/archive/colors.php
	//http://davidbau.com/colors/
	"IndianRed",
	"LightCoral",
	"Salmon",
	"DarkSalmon",
	"LightSalmon",
	"Crimson",
	"Red",
	"FireBrick",
	"DarkRed",
	"Pink",
	"LightPink",
	"HotPink",
	"DeepPink",
	"MediumVioletRed",
	"PaleVioletRed",
	"LightSalmon",
	"Coral",
	"Tomato",
	"OrangeRed",
	"DarkOrange",
	"Orange",
	"Gold",
	"Yellow",
	"LightYellow",
	"LemonChion",
	"LightGoldenrodYellow",
	"PapayaWhip",
	"Moccasin",
	"PeachPu",
	"PaleGoldenrod",
	"Khaki",
	"DarkKhaki",
	"Lavender",
	"Thistle",
	"Plum",
	"Violet",
	"Orchid",
	"Fuchsia",
	"Magenta",
	"MediumOrchid",
	"MediumPurple",
	"BlueViolet",
	"DarkViolet",
	"DarkOrchid",
	"DarkMagenta",
	"Purple",
	"Indigo",
	"SlateBlue",
	"DarkSlateBlue",
	"GreenYellow",
	"Chartreuse",
	"LawnGreen",
	"Lime",
	"LimeGreen",
	"PaleGreen",
	"LightGreen",
	"MediumSpringGreen",
	"SpringGreen",
	"MediumSeaGreen",
	"SeaGreen",
	"ForestGreen",
	"Green",
	"DarkGreen",
	"YellowGreen",
	"OliveDrab",
	"Olive",
	"DarkOliveGreen",
	"MediumAquamarine",
	"DarkSeaGreen",
	"LightSeaGreen",
	"DarkCyan",
	"Teal",
	"Aqua",
	"Cyan",
	"LightCyan",
	"PaleTurquoise",
	"Aquamarine",
	"Turquoise",
	"MediumTurquoise",
	"DarkTurquoise",
	"CadetBlue",
	"SteelBlue",
	"LightSteelBlue",
	"PowderBlue",
	"LightBlue",
	"SkyBlue",
	"LightSkyBlue",
	"DeepSkyBlue",
	"DodgerBlue",
	"CornlowerBlue",
	"MediumSlateBlue",
	"RoyalBlue",
	"Blue",
	"MediumBlue",
	"DarkBlue",
	"Navy",
	"MidnightBlue",
	"Cornsilk",
	"BlanchedAlmond",
	"Bisque",
	"NavajoWhite",
	"Wheat",
	"BurlyWood",
	"Tan",
	"RosyBrown",
	"SandyBrown",
	"Goldenrod",
	"DarkGoldenrod",
	"Peru",
	"Chocolate",
	"SaddleBrown",
	"Sienna",
	"Brown",
	"Maroon",
	"White",
	"Snow",
	"Honeydew",
	"MintCream",
	"Azure",
	"AliceBlue",
	"GhostWhite",
	"WhiteSmoke",
	"Seashell",
	"Beige",
	"OldLace",
	"FloralWhite",
	"Ivory",
	"AntiqueWhite",
	"Linen",
	"LavenderBlush",
	"MistyRose",
	"Gainsboro",
	"LightGrey",
	"Silver",
	"DarkGray",
	"Gray",
	"DimGray",
	"LightSlateGray",
	"SlateGray",
	"DarkSlateGray",
	"Black",
};
bool g_bFlashyColor[MAX_COLORS] = 
{
	//http://prideout.net/archive/colors.php
	//http://davidbau.com/colors/
	false,// "IndianRed",
	false,// "LightCoral",
	false,// "Salmon",
	false,// "DarkSalmon",
	false,// "LightSalmon",
	false,// "Crimson",
	true,// "Red",
	false,// "FireBrick",
	false,// "DarkRed",
	false,// "Pink",
	false,// "LightPink",
	false,// "HotPink",
	true,// "DeepPink",
	false,// "MediumVioletRed",
	false,// "PaleVioletRed",
	false,// "LightSalmon",
	false,// "Coral",
	false,// "Tomato",
	false,// "OrangeRed",
	false,// "DarkOrange",
	false,// "Orange",
	true,// "Gold",
	false,// "Yellow",
	false,// "LightYellow",
	false,// "LemonChion",
	false,// "LightGoldenrodYellow",
	false,// "PapayaWhip",
	false,// "Moccasin",
	false,// "PeachPu",
	false,// "PaleGoldenrod",
	false,// "Khaki",
	false,// "DarkKhaki",
	false,// "Lavender",
	false,// "Thistle",
	false,// "Plum",
	false,// "Violet",
	false,// "Orchid",
	true,// "Fuchsia",
	false,// "Magenta",
	false,// "MediumOrchid",
	false,// "MediumPurple",
	false,// "BlueViolet",
	false,// "DarkViolet",
	false,// "DarkOrchid",
	false,// "DarkMagenta",
	false,// "Purple",
	false,// "Indigo",
	false,// "SlateBlue",
	false,// "DarkSlateBlue",
	false,// "GreenYellow",
	false,// "Chartreuse",
	true,// "LawnGreen",
	true,// "Lime",
	false,// "LimeGreen",
	false,// "PaleGreen",
	false,// "LightGreen",
	false,// "MediumSpringGreen",
	false,// "SpringGreen",
	false,// "MediumSeaGreen",
	false,// "SeaGreen",
	false,// "ForestGreen",
	false,// "Green",
	false,// "DarkGreen",
	false,// "YellowGreen",
	false,// "OliveDrab",
	false,// "Olive",
	false,// "DarkOliveGreen",
	false,// "MediumAquamarine",
	false,// "DarkSeaGreen",
	false,// "LightSeaGreen",
	false,// "DarkCyan",
	false,// "Teal",
	false,// "Aqua",
	false,// "Cyan",
	false,// "LightCyan",
	false,// "PaleTurquoise",
	false,// "Aquamarine",
	false,// "Turquoise",
	false,// "MediumTurquoise",
	false,// "DarkTurquoise",
	false,// "CadetBlue",
	false,// "SteelBlue",
	false,// "LightSteelBlue",
	false,// "PowderBlue",
	false,// "LightBlue",
	false,// "SkyBlue",
	false,// "LightSkyBlue",
	false,// "DeepSkyBlue",
	false,// "DodgerBlue",
	false,// "CornlowerBlue",
	false,// "MediumSlateBlue",
	false,// "RoyalBlue",
	true,// "Blue",
	false,// "MediumBlue",
	false,// "DarkBlue",
	true,// "Navy",
	false,// "MidnightBlue",
	false,// "Cornsilk",
	false,// "BlanchedAlmond",
	false,// "Bisque",
	false,// "NavajoWhite",
	false,// "Wheat",
	false,// "BurlyWood",
	false,// "Tan",
	false,// "RosyBrown",
	false,// "SandyBrown",
	false,// "Goldenrod",
	false,// "DarkGoldenrod",
	false,// "Peru",
	false,// "Chocolate",
	false,// "SaddleBrown",
	false,// "Sienna",
	false,// "Brown",
	false,// "Maroon",
	false,// "White",
	false,// "Snow",
	false,// "Honeydew",
	false,// "MintCream",
	false,// "Azure",
	false,// "AliceBlue",
	false,// "GhostWhite",
	false,// "WhiteSmoke",
	false,// "Seashell",
	false,// "Beige",
	false,// "OldLace",
	false,// "FloralWhite",
	false,// "Ivory",
	false,// "AntiqueWhite",
	false,// "Linen",
	false,// "LavenderBlush",
	false,// "MistyRose",
	false,// "Gainsboro",
	false,// "LightGrey",
	false,// "Silver",
	false,// "DarkGray",
	false,// "Gray",
	false,// "DimGray",
	false,// "LightSlateGray",
	false,// "SlateGray",
	false,// "DarkSlateGray",
	false,// "Black",
};

stock const float g_fColorValues[MAX_COLORS][] =
{
	{0.804, 0.361, 0.361},
	{0.941, 0.502, 0.502},
	{0.980, 0.502, 0.447},
	{0.914, 0.588, 0.478},
	{1.000, 0.627, 0.478},
	{0.863, 0.078, 0.235},
	{1.000, 0.000, 0.000},
	{0.698, 0.133, 0.133},
	{0.545, 0.000, 0.000},
	{1.000, 0.753, 0.796},
	{1.000, 0.714, 0.757},
	{1.000, 0.412, 0.706},
	{1.000, 0.078, 0.576},
	{0.780, 0.082, 0.522},
	{0.859, 0.439, 0.576},
	{1.000, 0.627, 0.478},
	{1.000, 0.498, 0.314},
	{1.000, 0.388, 0.278},
	{1.000, 0.271, 0.000},
	{1.000, 0.549, 0.000},
	{1.000, 0.647, 0.000},
	{1.000, 0.843, 0.000},
	{1.000, 1.000, 0.000},
	{1.000, 1.000, 0.878},
	{1.000, 0.980, 0.804},
	{0.980, 0.980, 0.824},
	{1.000, 0.937, 0.835},
	{1.000, 0.894, 0.710},
	{1.000, 0.855, 0.725},
	{0.933, 0.910, 0.667},
	{0.941, 0.902, 0.549},
	{0.741, 0.718, 0.420},
	{0.902, 0.902, 0.980},
	{0.847, 0.749, 0.847},
	{0.867, 0.627, 0.867},
	{0.933, 0.510, 0.933},
	{0.855, 0.439, 0.839},
	{1.000, 0.000, 1.000},
	{1.000, 0.000, 1.000},
	{0.729, 0.333, 0.827},
	{0.576, 0.439, 0.859},
	{0.541, 0.169, 0.886},
	{0.580, 0.000, 0.827},
	{0.600, 0.196, 0.800},
	{0.545, 0.000, 0.545},
	{0.502, 0.000, 0.502},
	{0.294, 0.000, 0.510},
	{0.416, 0.353, 0.804},
	{0.282, 0.239, 0.545},
	{0.678, 1.000, 0.184},
	{0.498, 1.000, 0.000},
	{0.486, 0.988, 0.000},
	{0.000, 1.000, 0.000},
	{0.196, 0.804, 0.196},
	{0.596, 0.984, 0.596},
	{0.565, 0.933, 0.565},
	{0.000, 0.980, 0.604},
	{0.000, 1.000, 0.498},
	{0.235, 0.702, 0.443},
	{0.180, 0.545, 0.341},
	{0.133, 0.545, 0.133},
	{0.000, 0.502, 0.000},
	{0.000, 0.392, 0.000},
	{0.604, 0.804, 0.196},
	{0.420, 0.557, 0.137},
	{0.502, 0.502, 0.000},
	{0.333, 0.420, 0.184},
	{0.400, 0.804, 0.667},
	{0.561, 0.737, 0.561},
	{0.125, 0.698, 0.667},
	{0.000, 0.545, 0.545},
	{0.000, 0.502, 0.502},
	{0.000, 1.000, 1.000},
	{0.000, 1.000, 1.000},
	{0.878, 1.000, 1.000},
	{0.686, 0.933, 0.933},
	{0.498, 1.000, 0.831},
	{0.251, 0.878, 0.816},
	{0.282, 0.820, 0.800},
	{0.000, 0.808, 0.820},
	{0.373, 0.620, 0.627},
	{0.275, 0.510, 0.706},
	{0.690, 0.769, 0.871},
	{0.690, 0.878, 0.902},
	{0.678, 0.847, 0.902},
	{0.529, 0.808, 0.922},
	{0.529, 0.808, 0.980},
	{0.000, 0.749, 1.000},
	{0.118, 0.565, 1.000},
	{0.392, 0.584, 0.929},
	{0.482, 0.408, 0.933},
	{0.255, 0.412, 0.882},
	{0.000, 0.000, 1.000},
	{0.000, 0.000, 0.804},
	{0.000, 0.000, 0.545},
	{0.000, 0.000, 0.502},
	{0.098, 0.098, 0.439},
	{1.000, 0.973, 0.863},
	{1.000, 0.922, 0.804},
	{1.000, 0.894, 0.769},
	{1.000, 0.871, 0.678},
	{0.961, 0.871, 0.702},
	{0.871, 0.722, 0.529},
	{0.824, 0.706, 0.549},
	{0.737, 0.561, 0.561},
	{0.957, 0.643, 0.376},
	{0.855, 0.647, 0.125},
	{0.722, 0.525, 0.043},
	{0.804, 0.522, 0.247},
	{0.824, 0.412, 0.118},
	{0.545, 0.271, 0.075},
	{0.627, 0.322, 0.176},
	{0.647, 0.165, 0.165},
	{0.502, 0.000, 0.000},
	{1.000, 1.000, 1.000},
	{1.000, 0.980, 0.980},
	{0.941, 1.000, 0.941},
	{0.961, 1.000, 0.980},
	{0.941, 1.000, 1.000},
	{0.941, 0.973, 1.000},
	{0.973, 0.973, 1.000},
	{0.961, 0.961, 0.961},
	{1.000, 0.961, 0.933},
	{0.961, 0.961, 0.863},
	{0.992, 0.961, 0.902},
	{1.000, 0.980, 0.941},
	{1.000, 1.000, 0.941},
	{0.980, 0.922, 0.843},
	{0.980, 0.941, 0.902},
	{1.000, 0.941, 0.961},
	{1.000, 0.894, 0.882},
	{0.863, 0.863, 0.863},
	{0.827, 0.827, 0.827},
	{0.753, 0.753, 0.753},
	{0.663, 0.663, 0.663},
	{0.502, 0.502, 0.502},
	{0.412, 0.412, 0.412},
	{0.467, 0.533, 0.600},
	{0.439, 0.502, 0.565},
	{0.184, 0.310, 0.310},
	{0.000, 0.000, 0.000}
};
stock const int g_iColorValues[MAX_COLORS][] =
{
	{205, 92, 92},
	{240, 128, 128},
	{250, 128, 114},
	{233, 150, 122},
	{255, 160, 122},
	{220, 20, 60},
	{255, 0, 0},
	{178, 34, 34},
	{139, 0, 0},
	{255, 192, 203},
	{255, 182, 193},
	{255, 105, 180},
	{255, 20, 147},
	{199, 21, 133},
	{219, 112, 147},
	{255, 160, 122},
	{255, 127, 80},
	{255, 99, 71},
	{255, 69, 0},
	{255, 140, 0},
	{255, 165, 0},
	{255, 215, 0},
	{255, 255, 0},
	{255, 255, 224},
	{255, 250, 205},
	{250, 250, 210},
	{255, 239, 213},
	{255, 228, 181},
	{255, 218, 185},
	{238, 232, 170},
	{240, 230, 140},
	{189, 183, 107},
	{230, 230, 250},
	{216, 191, 216},
	{221, 160, 221},
	{238, 130, 238},
	{218, 112, 214},
	{255, 0, 255},
	{255, 0, 255},
	{186, 85, 211},
	{147, 112, 219},
	{138, 43, 226},
	{148, 0, 211},
	{153, 50, 204},
	{139, 0, 139},
	{128, 0, 128},
	{75, 0, 130},
	{106, 90, 205},
	{72, 61, 139},
	{173, 255, 47},
	{127, 255, 0},
	{124, 252, 0},
	{0, 255, 0},
	{50, 205, 50},
	{152, 251, 152},
	{144, 238, 144},
	{0, 250, 154},
	{0, 255, 127},
	{60, 179, 113},
	{46, 139, 87},
	{34, 139, 34},
	{0, 128, 0},
	{0, 100, 0},
	{154, 205, 50},
	{107, 142, 35},
	{128, 128, 0},
	{85, 107, 47},
	{102, 205, 170},
	{143, 188, 143},
	{32, 178, 170},
	{0, 139, 139},
	{0, 128, 128},
	{0, 255, 255},
	{0, 255, 255},
	{224, 255, 255},
	{175, 238, 238},
	{127, 255, 212},
	{64, 224, 208},
	{72, 209, 204},
	{0, 206, 209},
	{95, 158, 160},
	{70, 130, 180},
	{176, 196, 222},
	{176, 224, 230},
	{173, 216, 230},
	{135, 206, 235},
	{135, 206, 250},
	{0, 191, 255},
	{30, 144, 255},
	{100, 149, 237},
	{123, 104, 238},
	{65, 105, 225},
	{0, 0, 255},
	{0, 0, 205},
	{0, 0, 139},
	{0, 0, 128},
	{25, 25, 112},
	{255, 248, 220},
	{255, 235, 205},
	{255, 228, 196},
	{255, 222, 173},
	{245, 222, 179},
	{222, 184, 135},
	{210, 180, 140},
	{188, 143, 143},
	{244, 164, 96},
	{218, 165, 32},
	{184, 134, 11},
	{205, 133, 63},
	{210, 105, 30},
	{139, 69, 19},
	{160, 82, 45},
	{165, 42, 42},
	{128, 0, 0},
	{255, 255, 255},
	{255, 250, 250},
	{240, 255, 240},
	{245, 255, 250},
	{240, 255, 255},
	{240, 248, 255},
	{248, 248, 255},
	{245, 245, 245},
	{255, 245, 238},
	{245, 245, 220},
	{253, 245, 230},
	{255, 250, 240},
	{255, 255, 240},
	{250, 235, 215},
	{250, 240, 230},
	{255, 240, 245},
	{255, 228, 225},
	{220, 220, 220},
	{211, 211, 211},
	{192, 192, 192},
	{169, 169, 169},
	{128, 128, 128},
	{105, 105, 105},
	{119, 136, 153},
	{112, 128, 144},
	{47, 79, 79},
	{0, 0, 0}
};

stock GetFlashyColorsInArray(int[] locations, int maxlen)
{
	int counted_colors = 0;
	for (int location = 0; location < MAX_COLORS && counted_colors < maxlen; location++)
	{
		if(g_bFlashyColor[location])
			locations[counted_colors++] = location;
	}
	return counted_colors;
}

public int GetRandomFlashyColor()
{
	int[] locations = new int[MAX_COLORS+1];
	int num_locations = GetFlashyColorsInArray(locations, MAX_COLORS + 1);
	num_locations--; //to offset the randomizer
	int random_location = GetRandomInt(0, num_locations);
	return locations[random_location];
}

public bool ColorGetFloat(const char[] name,float fColor[3])
{
	for(int color = 0; color < MAX_COLORS; color++)
	{
		if(StrEqual(g_cColorNames[color],name))
		{
			fColor = g_fColorValues[color];
			return true;
		}
	}
	return false;
}

